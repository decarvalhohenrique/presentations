# Rodando:
Tenha os seguintes pacotes instalados:

	* gcc-<version>
	* g++-<version>
	* gcc-<version>-multilib
	* nasm

onde <version> é a versão disponibilizada do GCC pela sua distro Linux.

No Debian, você precisará adicionar a arquitetura i386 caso o seu Linux
seja de 64-bits.

$ sudo dpkg --add-architecture i386
$ sudo apt update

Dado isso, é só executar:

$ make

Se seu Linux for de 64-bits, ele criará dois binários: sieve32 e sieve64
de 32-bits e 64-bits, respectivamente, caso contrário apenas o sieve32.
Caso ocorra um erro estranho de cabeçalho não encontrado, verifique se
o multilib está instalado.

Para executar:

sieve32 NÚMERO

ou

sieve64 NÚMERO

# Conteúdo:

sieve.c:		Implementação em C de uma casca para chamar is_prime.
is_prime.32.s:	Implementação em assembler de x86 de is_prime (32-bits).
is_pirme.64.s:	Implementação em assembler de AMD64 de is_prime (64-bits).
Makefile:		Makefile de exemplo.

# Exercícios:

1- Compile o sieve.c com o g++ ao invés de com o gcc.
 (a) O erro apresentado na tela é de compilação, montagem, ou ligação?
 (b) Explique o porquê do processo ter falhado. Dica: compare a saída do comando:

    $ objdump -t sieve.o

  antes e depois da alteração.

 (c) Por que declarar a função como `extern "C" int is_prime (int)' resolve o
     problema?
 (d) Modifique o código através da diretiva #ifdef __cplusplus para suportar
     os dois compiladores.

2- Crie uma função em C que receba dois inteiros de 32-bits e chame ela através
   de um arquivo em assembler. Faça para 32-bits e 64-bits.
