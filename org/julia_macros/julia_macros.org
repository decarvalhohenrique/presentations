#+STARTUP: overview indent inlineimages logdrawer
#+TITLE: Julia Metaprogramming and Macros
#+AUTHOR:      Pedro Bruel
#+LANGUAGE:    en
#+TAGS: noexport(n) Stats(S)
#+TAGS: Teaching(T) R(R) OrgMode(O) Python(P)
#+TAGS: Book(b) DOE(D) Code(C) NODAL(N) FPGA(F) Autotuning(A) Arnaud(r)
#+TAGS: ExportableReports(E)
#+TAGS: FAPESP(f)
#+TAGS: DataVis(v) PaperReview(W)
#+EXPORT_SELECT_TAGS: Blog
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+COLUMNS: %25ITEM %TODO %3PRIORITY %TAGS
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w@) APPT(a!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)

#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage[margin=2cm]{geometry}
#+LATEX_HEADER: \usepackage{sourcecodepro}
#+LATEX_HEADER: \usepackage{booktabs}
#+LATEX_HEADER: \usepackage{array}
#+LATEX_HEADER: \usepackage{colortbl}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{algpseudocode}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage[scale=2]{ccicons}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \usepackage{relsize}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{bm}
#+LATEX_HEADER: \usepackage{amsfonts}
#+LATEX_HEADER: \usepackage{wasysym}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{ragged2e}
#+LATEX_HEADER: \usepackage{textcomp}
#+LATEX_HEADER: \usepackage{pgfplots}
#+LATEX_HEADER: \usepackage{todonotes}
#+LATEX_HEADER: \usepgfplotslibrary{dateplot}
#+LATEX_HEADER: \lstdefinelanguage{Julia}%
#+LATEX_HEADER:   {morekeywords={abstract,struct,break,case,catch,const,continue,do,else,elseif,%
#+LATEX_HEADER:       end,export,false,for,function,immutable,mutable,using,import,importall,if,in,%
#+LATEX_HEADER:       macro,module,quote,return,switch,true,try,catch,type,typealias,%
#+LATEX_HEADER:       while,<:,+,-,::,/},%
#+LATEX_HEADER:    sensitive=true,%
#+LATEX_HEADER:    alsoother={$},%
#+LATEX_HEADER:    morecomment=[l]\#,%
#+LATEX_HEADER:    morecomment=[n]{\#=}{=\#},%
#+LATEX_HEADER:    morestring=[s]{"}{"},%
#+LATEX_HEADER:    morestring=[m]{'}{'},%
#+LATEX_HEADER: }[keywords,comments,strings]%
#+LATEX_HEADER: \lstset{ %
#+LATEX_HEADER:   backgroundcolor={},
#+LATEX_HEADER:   basicstyle=\ttfamily\scriptsize,
#+LATEX_HEADER:   breakatwhitespace=true,
#+LATEX_HEADER:   breaklines=true,
#+LATEX_HEADER:   captionpos=n,
# #+LATEX_HEADER:   escapeinside={\%*}{*)},
#+LATEX_HEADER:   extendedchars=true,
#+LATEX_HEADER:   frame=n,
#+LATEX_HEADER:   language=R,
#+LATEX_HEADER:   rulecolor=\color{black},
#+LATEX_HEADER:   showspaces=false,
#+LATEX_HEADER:   showstringspaces=false,
#+LATEX_HEADER:   showtabs=false,
#+LATEX_HEADER:   stepnumber=2,
#+LATEX_HEADER:   stringstyle=\color{gray},
#+LATEX_HEADER:   tabsize=2,
#+LATEX_HEADER: }
#+LATEX_HEADER: \renewcommand*{\UrlFont}{\ttfamily\smaller\relax}

* Metaprogramming
- Don't do it without good reason: https://www.youtube.com/watch?v=mSgXWpvQEHE
  - https://gist.github.com/MikeInnes/8299575
- Maybe do it like this: https://github.com/JuliaLang/julia/blob/707616df0a22da1b834486f5ea5dff2b6dda15c6/base/math.jl#L91
  - Create Domain Specific Languages (DSL) and new syntax
- Docs: https://docs.julialang.org/en/v1/manual/metaprogramming/#Program-representation-1

** Program Representation: Going Meta
#+begin_SRC julia :eval no-export :exports both :tangle metaprogramming.jl
prog = "1 + 1"
#+end_SRC

#+RESULTS:
: "1 + 1"

#+begin_SRC julia :eval no-export :exports both :tangle metaprogramming.jl
ex1 = Meta.parse(prog)
ex1
#+end_SRC

#+RESULTS:
: :(1 + 1)

#+begin_SRC julia :eval no-export :exports both :tangle metaprogramming.jl
typeof(ex1)
#+end_SRC

#+RESULTS:
: Expr

#+begin_SRC julia :eval no-export :exports both :tangle metaprogramming.jl
ex1.head
#+end_SRC

#+RESULTS:
: :call

#+begin_SRC julia :eval no-export :exports both :tangle metaprogramming.jl
ex1.args
#+end_SRC

#+RESULTS:
: 3-element Array{Any,1}:
:   :+
:  1
:  1

#+begin_SRC julia :eval no-export :exports both :tangle metaprogramming.jl
ex2 = Expr(:call, :+, 1, 1)
#+end_SRC

#+RESULTS:
: :(1 + 1)

#+begin_SRC julia :eval no-export :exports both :tangle metaprogramming.jl
ex1 == ex2
#+end_SRC

#+RESULTS:
: true

#+begin_SRC julia :eval no-export :exports both :tangle metaprogramming.jl
dump(ex2)
#+end_SRC

#+RESULTS:
: Expr
:   head: Symbol call
:   args: Array{Any}((3,))
:     1: Symbol +
:     2: Int64 1
:     3: Int64 1

#+begin_SRC julia :eval no-export :exports both :tangle metaprogramming.jl
ex3 = Meta.parse("(4 + 4) / 2")
#+end_SRC

#+RESULTS:
: :((4 + 4) / 2)

#+begin_SRC julia :eval no-export :exports both :tangle metaprogramming.jl
Meta.show_sexpr(ex3)
#+end_SRC

#+RESULTS:
: (:call, :/, (:call, :+, 4, 4), 2)

** Symbols
#+begin_SRC julia :eval no-export :exports both :tangle symbols.jl
:foo
#+end_SRC

#+RESULTS:
: :foo

#+begin_SRC julia :eval no-export :exports both :tangle symbols.jl
typeof(ans)
#+end_SRC

#+RESULTS:
: Symbol

#+begin_SRC julia :eval no-export :exports both :tangle symbols.jl
:foo == Symbol("foo")
#+end_SRC

#+RESULTS:
: true

#+begin_SRC julia :eval no-export :exports both :tangle symbols.jl
Symbol("func", 10)
#+end_SRC

#+RESULTS:
: :func10

#+begin_SRC julia :eval no-export :exports both :tangle symbols.jl
Symbol(:var,'_',"sym")
#+end_SRC

#+RESULTS:
: :var_sym

* Expressions
- https://docs.julialang.org/en/v1/manual/metaprogramming/#Expressions-and-evaluation-1
** Quoting
#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
ex = :(a+b*c+1)
#+end_SRC

#+RESULTS:
: :(a + b * c + 1)

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
typeof(ex)
#+end_SRC

#+RESULTS:
: Expr

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
:(a + b*c + 1) ==
    Meta.parse("a + b*c + 1") ==
    Expr(:call, :+, :a, Expr(:call, :*, :b, :c), 1)
#+end_SRC

#+RESULTS:
: true

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
ex = quote
    x = 1
    y = 2
    x + y
end
#+end_SRC

#+RESULTS:
: quote
:     #= In[35]:2 =#
:     x = 1
:     #= In[35]:3 =#
:     y = 2
:     #= In[35]:4 =#
:     x + y
: end

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
typeof(ex)
#+end_SRC

#+RESULTS:
: Expr

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
:(1 + 2)
#+end_SRC

#+RESULTS:
: :(1 + 2)

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
eval(ans)
#+end_SRC

#+RESULTS:
: 3

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
ex = :(a + b)
#+end_SRC

#+RESULTS:
: :(a + b)

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
eval(ex)
#+end_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: UndefVarError: a not defined
:
: Stacktrace:
:  [1] top-level scope at /home/phrb/.julia/packages/IJulia/DrVMH/src/kernel.jl:52
:  [2] eval at ./boot.jl:331 [inlined]
:  [3] eval(::Expr) at ./client.jl:449
:  [4] top-level scope at In[40]:1
:END:

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
a = 1; b = 2;
#+end_SRC

#+RESULTS:

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
eval(ex)
#+end_SRC

#+RESULTS:
: 3

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
ex = :(x = 1)
#+end_SRC

#+RESULTS:
: :(x = 1)

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
x
#+end_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: UndefVarError: x not defined
:
: Stacktrace:
:  [1] top-level scope at In[44]:1
:END:

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
eval(ex)
#+end_SRC

#+RESULTS:
: 1

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
x
#+end_SRC

#+RESULTS:
: 1

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
a = 1;
#+end_SRC

#+RESULTS:

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
ex = Expr(:call, :+, a, :b)
#+end_SRC

#+RESULTS:
: :(1 + b)

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
a = 0; b = 2;
#+end_SRC

#+RESULTS:

#+begin_SRC julia :eval no-export :exports both :tangle expressions.jl
eval(ex)
#+end_SRC

#+RESULTS:
: 3

** Functions Generating Expressions
#+begin_SRC julia :eval no-export :exports both :tangle function_expressions.jl
function math_expr(op, op1, op2)
    expr = Expr(:call, op, op1, op2)
    return expr
end
#+end_SRC

#+RESULTS:
: math_expr (generic function with 1 method)

#+begin_SRC julia :eval no-export :exports both :tangle function_expressions.jl
ex = math_expr(:+, 1, Expr(:call, :*, 4, 5))
#+end_SRC

#+RESULTS:
: :(1 + 4 * 5)

#+begin_SRC julia :eval no-export :exports both :tangle function_expressions.jl
eval(ex)
#+end_SRC

#+RESULTS:
: 21

#+begin_SRC julia :eval no-export :exports both :tangle function_expressions.jl
function make_expr2(op, opr1, opr2)
    opr1f, opr2f = map(x -> isa(x, Number) ? 2*x : x, (opr1, opr2))
    retexpr = Expr(:call, op, opr1f, opr2f)
    return retexpr
end
#+end_SRC

#+RESULTS:
: make_expr2 (generic function with 1 method)

#+begin_SRC julia :eval no-export :exports both :tangle function_expressions.jl
make_expr2(:+, 1, 2)
#+end_SRC

#+RESULTS:
: :(2 + 4)

#+begin_SRC julia :eval no-export :exports both :tangle function_expressions.jl
ex = make_expr2(:+, 1, Expr(:call, :*, 5, 8))
#+end_SRC

#+RESULTS:
: :(2 + 5 * 8)

#+begin_SRC julia :eval no-export :exports both :tangle function_expressions.jl
eval(ex)
#+end_SRC

#+RESULTS:
: 42

* Macros
- https://docs.julialang.org/en/v1/manual/metaprogramming/#man-macros-1
** Introduction
#+begin_SRC julia :eval no-export :exports both :tangle macros.jl
macro sayhello()
    return :( println("Hello, world!") )
end
#+end_SRC

#+RESULTS:
: @sayhello (macro with 1 method)

#+begin_SRC julia :eval no-export :exports both :tangle macros.jl
@sayhello
#+end_SRC

#+RESULTS:
: Hello, world!

#+begin_SRC julia :eval no-export :exports both :tangle macros.jl
macro sayhello(name)
    return :( println("Hello, ", $name) )
end
#+end_SRC

#+RESULTS:
: @sayhello (macro with 2 methods)

#+begin_SRC julia :eval no-export :exports both :tangle macros.jl
@sayhello "MAC110"
#+end_SRC

#+RESULTS:
: Hello, MAC110

#+begin_SRC julia :eval no-export :exports both :tangle macros.jl
ex = macroexpand(Main, :(@sayhello("human")) )
#+end_SRC

#+RESULTS:
: :(Main.println("Hello, ", "human"))

** Macro Expand
#+begin_SRC julia :eval no-export :exports both :tangle macros.jl
@macroexpand @sayhello "human"
#+end_SRC

#+RESULTS:
: :(Main.println("Hello, ", "human"))

#+begin_SRC julia :eval no-export :exports both :tangle macros.jl
@macroexpand @macroexpand @sayhello "human"
#+end_SRC

#+RESULTS:
: :(Base.macroexpand(Main, $(QuoteNode(:(#= In[64]:1 =# @sayhello "human"))), recursive = true))

** Two-Step Evaluation
#+begin_SRC julia :eval no-export :exports both :tangle macros.jl
macro twostep(arg)
    println("I execute at parse time. The argument is: ", arg)
    return :(println("I execute at runtime. The argument is: ", $arg))
end
#+end_SRC

#+RESULTS:
: @twostep (macro with 1 method)

#+begin_SRC julia :eval no-export :exports both :tangle macros.jl
ex = macroexpand(Main, :(@twostep :(1, 2, 3)) );
#+end_SRC

#+RESULTS:
: I execute at parse time. The argument is: :((1, 2, 3))

#+begin_SRC julia :eval no-export :exports both :tangle macros.jl
typeof(ex)
#+end_SRC

#+RESULTS:
: Expr

#+begin_SRC julia :eval no-export :exports both :tangle macros.jl
ex
#+end_SRC

#+RESULTS:
: :(Main.println("I execute at runtime. The argument is: ", $(Expr(:copyast, :($(QuoteNode(:((1, 2, 3)))))))))

#+begin_SRC julia :eval no-export :exports both :tangle macros.jl
eval(ex)
#+end_SRC

#+RESULTS:
: I execute at runtime. The argument is: (1, 2, 3)

* Some Useful Julia Macros
** Assert and Test
- https://docs.julialang.org/en/v1/stdlib/Test/
#+begin_SRC julia :eval no-export :exports both :tangle assert_test.jl
using Test
#+end_SRC

#+RESULTS:

#+begin_SRC julia :eval no-export :exports both :tangle assert_test.jl
@assert 1 == 1
#+end_SRC

#+RESULTS:

#+begin_SRC julia :eval no-export :exports both :tangle assert_test.jl
@assert 1 == 2
#+end_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: AssertionError: 1 == 2
:
: Stacktrace:
:  [1] top-level scope at In[78]:1
:END:

#+begin_SRC julia :eval no-export :exports both :tangle assert_test.jl
@assert 1 == 2 "Very Bad Error"
#+end_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: AssertionError: Very Bad Error
:
: Stacktrace:
:  [1] top-level scope at In[80]:1
:END:

#+begin_SRC julia :eval no-export :exports both :tangle assert_test.jl
@macroexpand @assert 1 == 2 "Very Bad Error"
#+end_SRC

#+RESULTS:
: :(if 1 == 2
:       nothing
:   else
:       Base.throw(Base.AssertionError("Very Bad Error"))
:   end)

#+begin_SRC julia :eval no-export :exports both :tangle assert_test.jl
@macroexpand @assert 1 == 2
#+end_SRC

#+RESULTS:
: :(if 1 == 2
:       nothing
:   else
:       Base.throw(Base.AssertionError("1 == 2"))
:   end)

#+begin_SRC julia :eval no-export :exports both :tangle assert_test.jl
@test 1 == 1
#+end_SRC

#+RESULTS:
: [32m[1mTest Passed[22m[39m

#+begin_SRC julia :eval no-export :exports both :tangle assert_test.jl
@testset "Helpful Tests" begin
    @testset "Tautologies" begin
        @test 1 == 1
        @test "a" == "a"
        @test pi == 3.1415
    end
    @testset "Hopefully True" begin
        @test isapprox(2, 2.0002, atol = 1)
        @test isapprox(2 + 2, 5, atol = 1)
        @test isapprox(2 + 2, 3)
        @test isapprox(1e-10, 2e-9, atol = 1e-8)
    end
end
#+end_SRC

#+RESULTS:
:RESULTS:
#+begin_example
[37mTautologies: [39m[91m[1mTest Failed[22m[39m at [39m[1mIn[164]:5[22m
  Expression: pi == 3.1415
   Evaluated: π == 3.1415
Stacktrace:
 [1] top-level scope at [1mIn[164]:5[22m
 [2] top-level scope at [1m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113[22m
 [3] top-level scope at [1mIn[164]:3[22m
 [4] top-level scope at [1m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113[22m
 [5] top-level scope at [1mIn[164]:2[22m
[37mHopefully True: [39m[91m[1mTest Failed[22m[39m at [39m[1mIn[164]:10[22m
  Expression: isapprox(2 + 2, 3)
   Evaluated: isapprox(4, 3)
Stacktrace:
 [1] top-level scope at [1mIn[164]:10[22m
 [2] top-level scope at [1m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113[22m
 [3] top-level scope at [1mIn[164]:8[22m
 [4] top-level scope at [1m/buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113[22m
 [5] top-level scope at [1mIn[164]:2[22m
[37m[1mTest Summary:    | [22m[39m[32m[1mPass  [22m[39m[91m[1mFail  [22m[39m[36m[1mTotal[22m[39m
Helpful Tests    | [32m   5  [39m[91m   2  [39m[36m    7[39m
  Tautologies    | [32m   2  [39m[91m   1  [39m[36m    3[39m
  Hopefully True | [32m   3  [39m[91m   1  [39m[36m    4[39m
#+end_example
# [goto error]
: Some tests did not pass: 5 passed, 2 failed, 0 errored, 0 broken.
:
: Stacktrace:
:  [1] finish(::Test.DefaultTestSet) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:879
:  [2] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1123
:  [3] top-level scope at In[164]:2
:END:
** Measuring Time and Allocations
- https://docs.julialang.org/en/v1/manual/profile/#Memory-allocation-analysis-1
#+begin_SRC julia :eval no-export :exports both :tangle measuring.jl
@elapsed a = rand(10 ^ 6)
#+end_SRC

#+RESULTS:
: 0.00338456

#+begin_SRC julia :eval no-export :exports both :tangle measuring.jl
@macroexpand @elapsed a = rand(10 ^ 6)
#+end_SRC

#+RESULTS:
#+begin_example
quote
    #= util.jl:232 =#
    while false
        #= util.jl:232 =#
    end
    #= util.jl:233 =#
    local var"#1136#t0" = Base.time_ns()
    #= util.jl:234 =#
    a = rand(10 ^ 6)
    #= util.jl:235 =#
    (Base.time_ns() - var"#1136#t0") / 1.0e9
end
#+end_example

#+begin_SRC julia :eval no-export :exports both :tangle measuring.jl
@allocated a = rand(10 ^ 6)
#+end_SRC

#+RESULTS:
: 8000080

#+begin_SRC julia :eval no-export :exports both :tangle measuring.jl
@macroexpand @allocated a = rand(10 ^ 6)
#+end_SRC

#+RESULTS:
#+begin_example
quote
    #= util.jl:264 =#
    while false
        #= util.jl:264 =#
    end
    #= util.jl:265 =#
    local var"#1143#b0" = Base.Ref{Base.Int64}(0)
    #= util.jl:266 =#
    local var"#1144#b1" = Base.Ref{Base.Int64}(0)
    #= util.jl:267 =#
    Base.gc_bytes(var"#1143#b0")
    #= util.jl:268 =#
    a = rand(10 ^ 6)
    #= util.jl:269 =#
    Base.gc_bytes(var"#1144#b1")
    #= util.jl:270 =#
    var"#1144#b1"[] - var"#1143#b0"[]
end
#+end_example

#+begin_SRC julia :eval no-export :exports both :tangle measuring.jl
@time a = rand(10 ^ 6)
#+end_SRC

#+RESULTS:
:RESULTS:
:   0.005187 seconds (2 allocations: 7.629 MiB)
#+begin_example
1000000-element Array{Float64,1}:
 0.4278647954119075
 0.4878209580530428
 0.765991125946309
 0.6810994827387276
 0.3236387270987091
 0.8831633448017757
 0.9517283026391348
 0.9063257851857109
 0.1384297978100273
 0.3879798422452623
 0.6937135061099025
 0.2524176690374682
 0.5090657106943612
 ⋮
 0.660302604957659
 0.7745255296512115
 0.5918236238044727
 0.6125345137152665
 0.5746968194126632
 0.8140468895171427
 0.22069293541687807
 0.5110341953523074
 0.18267775628487892
 0.2513037627935295
 0.7649128250867894
 0.22322636653919115
#+end_example
:END:

#+begin_SRC julia :eval no-export :exports both :tangle measuring.jl
@macroexpand @time a = rand(10 ^ 6)
#+end_SRC

#+RESULTS:
#+begin_example
quote
    #= util.jl:172 =#
    while false
        #= util.jl:172 =#
    end
    #= util.jl:173 =#
    local var"#1177#stats" = Base.gc_num()
    #= util.jl:174 =#
    local var"#1179#elapsedtime" = Base.time_ns()
    #= util.jl:175 =#
    local var"#1178#val" = (a = rand(10 ^ 6))
    #= util.jl:176 =#
    var"#1179#elapsedtime" = Base.time_ns() - var"#1179#elapsedtime"
    #= util.jl:177 =#
    local var"#1180#diff" = Base.GC_Diff(Base.gc_num(), var"#1177#stats")
    #= util.jl:178 =#
    Base.time_print(var"#1179#elapsedtime", (var"#1180#diff").allocd, (var"#1180#diff").total_time, Base.gc_alloc_count(var"#1180#diff"))
    #= util.jl:180 =#
    Base.println()
    #= util.jl:181 =#
    var"#1178#val"
end
#+end_example

#+begin_SRC julia :eval no-export :exports both :tangle measuring.jl
@timev a = rand(10 ^ 6)
#+end_SRC

#+RESULTS:
:RESULTS:
:   0.003174 seconds (2 allocations: 7.629 MiB)
: elapsed time (ns): 3174413
: bytes allocated:   8000080
: pool allocs:       1
: malloc() calls:    1
#+begin_example
1000000-element Array{Float64,1}:
 0.3050655824672268
 0.14319891378327476
 0.8571353223736262
 0.8948849008911621
 0.9602611188213681
 0.7410976629366104
 0.16806680316389677
 0.8448005838339343
 0.9917835165191313
 0.6129639174793629
 0.719358365473701
 0.7222657823942131
 0.3099047343059975
 ⋮
 0.18270492771998725
 0.7500720399268028
 0.10439930739153946
 0.12509689988496642
 0.5043791363869738
 0.15054457466214433
 0.8773987505542595
 0.1506599321057691
 0.6307056884649636
 0.436609448097516
 0.34606342963321235
 0.2834266713889826
#+end_example
:END:

#+begin_SRC julia :eval no-export :exports both :tangle measuring.jl
@macroexpand @timev a = rand(10 ^ 6)
#+end_SRC

#+RESULTS:
#+begin_example
quote
    #= util.jl:206 =#
    while false
        #= util.jl:206 =#
    end
    #= util.jl:207 =#
    local var"#1184#stats" = Base.gc_num()
    #= util.jl:208 =#
    local var"#1186#elapsedtime" = Base.time_ns()
    #= util.jl:209 =#
    local var"#1185#val" = (a = rand(10 ^ 6))
    #= util.jl:210 =#
    var"#1186#elapsedtime" = Base.time_ns() - var"#1186#elapsedtime"
    #= util.jl:211 =#
    Base.timev_print(var"#1186#elapsedtime", Base.GC_Diff(Base.gc_num(), var"#1184#stats"))
    #= util.jl:212 =#
    var"#1185#val"
end
#+end_example
** Parallel Computing
- https://docs.julialang.org/en/v1/manual/parallel-computing/
*** Threads
#+begin_SRC julia :eval no-export :exports both :tangle threads.jl
Threads.nthreads()
#+end_SRC

#+RESULTS:
: 6


#+begin_SRC julia :eval no-export :exports both :tangle threads.jl
a = zeros(12)
#+end_SRC

#+RESULTS:
#+begin_example
12-element Array{Float64,1}:
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
#+end_example

#+begin_SRC julia :eval no-export :exports both :tangle threads.jl
Threads.@threads for i = 1:12
    a[i] = Threads.threadid()
end
a
#+end_SRC

#+RESULTS:
#+begin_example
12-element Array{Float64,1}:
 1.0
 1.0
 2.0
 2.0
 3.0
 3.0
 4.0
 4.0
 5.0
 5.0
 6.0
 6.0
#+end_example

#+begin_SRC julia :eval no-export :exports both :tangle threads.jl
@macroexpand Threads.@threads for i = 1:12
    a[i] = Threads.threadid()
end
#+end_SRC

#+RESULTS:
#+begin_example
quote
    #= threadingconstructs.jl:25 =#
    local var"#1630#threadsfor_fun"
    #= threadingconstructs.jl:26 =#
    let var"#1629#range" = 1:12
        #= threadingconstructs.jl:27 =#
        function var"#1630#threadsfor_fun"(var"#1642#onethread" = false)
            #= threadingconstructs.jl:28 =#
            var"#1634#r" = var"#1629#range"
            #= threadingconstructs.jl:29 =#
            var"#1635#lenr" = Base.Threads.length(var"#1634#r")
            #= threadingconstructs.jl:31 =#
            if var"#1642#onethread"
                #= threadingconstructs.jl:32 =#
                var"#1636#tid" = 1
                #= threadingconstructs.jl:33 =#
                (var"#1637#len", var"#1638#rem") = (var"#1635#lenr", 0)
            else
                #= threadingconstructs.jl:35 =#
                var"#1636#tid" = Base.Threads.threadid()
                #= threadingconstructs.jl:36 =#
                (var"#1637#len", var"#1638#rem") = Base.Threads.divrem(var"#1635#lenr", Base.Threads.nthreads())
            end
            #= threadingconstructs.jl:39 =#
            if var"#1637#len" == 0
                #= threadingconstructs.jl:40 =#
                if var"#1636#tid" > var"#1638#rem"
                    #= threadingconstructs.jl:41 =#
                    return
                end
                #= threadingconstructs.jl:43 =#
                (var"#1637#len", var"#1638#rem") = (1, 0)
            end
            #= threadingconstructs.jl:46 =#
            var"#1639#f" = Base.Threads.firstindex(var"#1634#r") + (var"#1636#tid" - 1) * var"#1637#len"
            #= threadingconstructs.jl:47 =#
            var"#1640#l" = (var"#1639#f" + var"#1637#len") - 1
            #= threadingconstructs.jl:49 =#
            if var"#1638#rem" > 0
                #= threadingconstructs.jl:50 =#
                if var"#1636#tid" <= var"#1638#rem"
                    #= threadingconstructs.jl:51 =#
                    var"#1639#f" = var"#1639#f" + (var"#1636#tid" - 1)
                    #= threadingconstructs.jl:52 =#
                    var"#1640#l" = var"#1640#l" + var"#1636#tid"
                else
                    #= threadingconstructs.jl:54 =#
                    var"#1639#f" = var"#1639#f" + var"#1638#rem"
                    #= threadingconstructs.jl:55 =#
                    var"#1640#l" = var"#1640#l" + var"#1638#rem"
                end
            end
            #= threadingconstructs.jl:59 =#
            for var"#1641#i" = var"#1639#f":var"#1640#l"
                #= threadingconstructs.jl:60 =#
                local i = begin
                            $(Expr(:inbounds, true))
                            local var"#1643#val" = var"#1634#r"[var"#1641#i"]
                            $(Expr(:inbounds, :pop))
                            var"#1643#val"
                        end
                #= threadingconstructs.jl:61 =#
                begin
                    #= In[268]:2 =#
                    a[i] = Threads.threadid()
                end
            end
        end
    end
    #= threadingconstructs.jl:65 =#
    if Base.Threads.threadid() != 1
        #= threadingconstructs.jl:67 =#
        (Base.Threads.Base).invokelatest(var"#1630#threadsfor_fun", true)
    else
        #= threadingconstructs.jl:69 =#
        ccall(:jl_threading_run, Base.Threads.Cvoid, (Base.Threads.Any,), var"#1630#threadsfor_fun")
    end
    #= threadingconstructs.jl:71 =#
    Base.Threads.nothing
end
#+end_example

#+begin_SRC julia :eval no-export :exports both :tangle threads.jl
a = rand(10 ^ 6)
#+end_SRC

#+RESULTS:
#+begin_example
1000000-element Array{Float64,1}:
 0.23292849719229247
 0.5881637737278618
 0.6168415100423086
 0.17884699186843167
 0.902525544099678
 0.2113959782678816
 0.9622238226620958
 0.2630590685344687
 0.8860216256720457
 0.05743193884724507
 0.08018073646967183
 0.3567752258154848
 0.8661807158822765
 ⋮
 0.6098126544887386
 0.3300208761361836
 0.7171717359910181
 0.6069266836639022
 0.7226283347836353
 0.9488911193984255
 0.09057402506684609
 0.07558173845252902
 0.21750919185763617
 0.6164704998073296
 0.9389651412617499
 0.11993784686895159
#+end_example

#+begin_SRC julia :eval no-export :exports both :tangle threads.jl
@timev begin
    for i = 1:length(a)
        a[i] = Threads.threadid()
    end
end
#+end_SRC

#+RESULTS:
:   0.102576 seconds (3.00 M allocations: 61.020 MiB)
: elapsed time (ns): 102575772
: bytes allocated:   63983696
: pool allocs:       2998980

#+begin_SRC julia :eval no-export :exports both :tangle threads.jl
@timev begin
    Threads.@threads for i = 1:length(a)
        a[i] = Threads.threadid()
    end
end
#+end_SRC

#+RESULTS:
:   0.033055 seconds (1.02 M allocations: 16.315 MiB)
: elapsed time (ns): 33055378
: bytes allocated:   17107647
: pool allocs:       1020792
: non-pool GC allocs:3
*** Processes
#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
using Distributed
#+end_SRC

#+RESULTS:

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
nprocs()
#+end_SRC

#+RESULTS:
: 1

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
addprocs(5)
#+end_SRC

#+RESULTS:
: 5-element Array{Int64,1}:
:  2
:  3
:  4
:  5
:  6

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
nprocs()
#+end_SRC

#+RESULTS:
: 6

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
function count_heads(n)
    c::Int = 0
    for i = 1:n
        c += rand(Bool)
    end
    c
end
#+end_SRC

#+RESULTS:
: count_heads (generic function with 1 method)

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
a = @spawnat :any count_heads(100000000)
#+end_SRC

#+RESULTS:
: Future(2, 1, 7, nothing)

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
fetch(a)
#+end_SRC

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
On worker 2:
UndefVarError: #count_heads not defined
deserialize_datatype at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Serialization/src/Serialization.jl:1211
handle_deserialize at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Serialization/src/Serialization.jl:788
deserialize at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Serialization/src/Serialization.jl:735
handle_deserialize at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Serialization/src/Serialization.jl:795
deserialize at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Serialization/src/Serialization.jl:735 [inlined]
deserialize_global_from_main at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Distributed/src/clusterserialize.jl:160
#3 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Distributed/src/clusterserialize.jl:72 [inlined]
foreach at ./abstractarray.jl:1919
deserialize at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Distributed/src/clusterserialize.jl:72
handle_deserialize at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Serialization/src/Serialization.jl:878
deserialize at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Serialization/src/Serialization.jl:735
handle_deserialize at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Serialization/src/Serialization.jl:792
deserialize at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Serialization/src/Serialization.jl:735
handle_deserialize at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Serialization/src/Serialization.jl:795
deserialize at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Serialization/src/Serialization.jl:735 [inlined]
deserialize_msg at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Distributed/src/messages.jl:99
#invokelatest#1 at ./essentials.jl:712 [inlined]
invokelatest at ./essentials.jl:711 [inlined]
message_handler_loop at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Distributed/src/process_messages.jl:185
process_tcp_streams at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Distributed/src/process_messages.jl:142
#97 at ./task.jl:358

Stacktrace:
 [1] #remotecall_fetch#141 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Distributed/src/remotecall.jl:390 [inlined]
 [2] remotecall_fetch(::Function, ::Distributed.Worker, ::Distributed.RRID) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Distributed/src/remotecall.jl:382
 [3] #remotecall_fetch#144 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Distributed/src/remotecall.jl:417 [inlined]
 [4] remotecall_fetch at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Distributed/src/remotecall.jl:417 [inlined]
 [5] call_on_owner at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Distributed/src/remotecall.jl:490 [inlined]
 [6] fetch(::Future) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Distributed/src/remotecall.jl:529
 [7] top-level scope at In[280]:1
#+end_example
:END:

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
@everywhere function count_heads(n)
    c::Int = 0
    for i = 1:n
        c += rand(Bool)
    end
    c
end
#+end_SRC

#+RESULTS:

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
a = @spawnat :any count_heads(100000000)
#+end_SRC

#+RESULTS:
: Future(4, 1, 25, nothing)

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
fetch(a)
#+end_SRC

#+RESULTS:
: 50007433

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
b = @spawnat :any count_heads(100000000)
#+end_SRC

#+RESULTS:
: Future(5, 1, 27, nothing)

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
fetch(a) + fetch(b)
#+end_SRC

#+RESULTS:
: 100005718

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
nheads = @distributed (+) for i = 1:200000000
    Int(rand(Bool))
end
#+end_SRC

#+RESULTS:
: 100001218

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
a = zeros(100000)

@distributed for i = 1:100000
    a[i] = i
end
#+end_SRC

#+RESULTS:
: Task (runnable) @0x00007f43f3edceb0

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
a
#+end_SRC

#+RESULTS:
#+begin_example
100000-element Array{Float64,1}:
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 ⋮
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
#+end_example

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
using SharedArrays

a = SharedArray{Float64}(10)

@distributed for i = 1:10
    a[i] = i
end

a
#+end_SRC

#+RESULTS:
#+begin_example
10-element SharedArray{Float64,1}:
  1.0
  2.0
  3.0
  4.0
  5.0
  6.0
  7.0
  8.0
  9.0
 10.0
#+end_example

#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
#+end_SRC
#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
#+end_SRC
#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
#+end_SRC
#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
#+end_SRC
#+begin_SRC julia :eval no-export :exports both :tangle processes.jl
#+end_SRC
** Profiling
- https://docs.julialang.org/en/v1/manual/profile/
#+begin_SRC julia :eval no-export :exports both :tangle profiling.jl
function myfunc()
    A = rand(200, 200, 400)
    maximum(A)
end
#+end_SRC

#+RESULTS:
: myfunc (generic function with 1 method)

#+begin_SRC julia :eval no-export :exports both :tangle profiling.jl
myfunc() # run once to force compilation
#+end_SRC

#+RESULTS:
: 0.9999999900774592

#+begin_SRC julia :eval no-export :exports both :tangle profiling.jl
using Profile
#+end_SRC

#+RESULTS:

#+begin_SRC julia :eval no-export :exports both :tangle profiling.jl
@profile myfunc()
#+end_SRC

#+RESULTS:
: 0.9999999970186788

#+begin_SRC julia :eval no-export :exports both :tangle profiling.jl
Profile.print()
#+end_SRC

#+RESULTS:
#+begin_example
Overhead ╎ [+additional indent] Count File:Line; Function
=========================================================
   ╎72  @Base/task.jl:358; (::IJulia.var"#15#18")()
   ╎ 72  @IJulia/src/eventloop.jl:8; eventloop(::ZMQ.Socket)
   ╎  72  @Base/essentials.jl:711; invokelatest
   ╎   72  @Base/essentials.jl:712; #invokelatest#1
   ╎    72  .../execute_request.jl:67; execute_request(::ZMQ.Socket, ...
   ╎     72  ...SoftGlobalScope.jl:218; softscope_include_string(::Mo...
  5╎    ╎ 72  @Base/boot.jl:331; eval
   ╎    ╎  53  In[295]:2; myfunc()
   ╎    ╎   53  ...dom/src/Random.jl:277; rand
   ╎    ╎    53  ...dom/src/Random.jl:289; rand(::Type{Float64}, ::Tup...
   ╎    ╎     53  ...om/src/Random.jl:288; rand
   ╎    ╎    ╎ 53  ...om/src/Random.jl:267; rand!
   ╎    ╎    ╎  53  ...dom/src/RNGs.jl:512; rand!
   ╎    ╎    ╎   53  ...dom/src/RNGs.jl:506; _rand!
   ╎    ╎    ╎    53  ...dom/src/RNGs.jl:494; rand!(::Random.MersenneT...
   ╎    ╎    ╎     53  ...om/src/RNGs.jl:468; fill_array!
 53╎    ╎    ╎    ╎ 53  ...m/src/DSFMT.jl:95; dsfmt_fill_array_close_...
   ╎    ╎  14  In[295]:3; myfunc()
   ╎    ╎   14  @Base/reducedim.jl:652; maximum
   ╎    ╎    14  @Base/reducedim.jl:652; #maximum#587
   ╎    ╎     14  @Base/reducedim.jl:656; _maximum
   ╎    ╎    ╎ 14  @Base/reducedim.jl:657; _maximum
   ╎    ╎    ╎  14  @Base/reducedim.jl:307; mapreduce
   ╎    ╎    ╎   14  @Base/reducedim.jl:307; #mapreduce#580
   ╎    ╎    ╎    14  @Base/reducedim.jl:312; _mapreduce_dim
   ╎    ╎    ╎     14  @Base/reduce.jl:407; _mapreduce(::typeof(ide...
   ╎    ╎    ╎    ╎ 9   @Base/reduce.jl:577; mapreduce_impl(::typeo...
  3╎    ╎    ╎    ╎  9   @Base/reduce.jl:545; _fast
   ╎    ╎    ╎    ╎   6   @Base/float.jl:536; isnan
  6╎    ╎    ╎    ╎    6   @Base/float.jl:456; !=
   ╎    ╎    ╎    ╎ 5   @Base/reduce.jl:580; mapreduce_impl(::typeo...
   ╎    ╎    ╎    ╎  5   @Base/range.jl:597; iterate
  5╎    ╎    ╎    ╎   5   .../promotion.jl:398; ==
   ╎371 @Base/task.jl:444; task_done_hook(::Task)
   ╎ 371 @Base/task.jl:709; wait
370╎  371 @Base/task.jl:702; poptaskref(::Base.InvasiveLinke...
Total snapshots: 888
#+end_example

#+begin_SRC julia :eval no-export :exports both :tangle profiling.jl
Profile.print(format = :flat, sortedby = :overhead)
#+end_SRC

#+RESULTS:
#+begin_example
 Count  Overhead File                    Line Function
 =====  ======== ====                    ==== ========
   371         0 @Base/task.jl            709 wait
   371         0 @Base/task.jl            444 task_done_hook(::Task)
    72         0 .../SoftGlobalScope.jl   218 softscope_include_string(::Modu...
    72         0 .../execute_request.jl    67 execute_request(::ZMQ.Socket, :...
    72         0 @Base/essentials.jl      712 #invokelatest#1
    72         0 @Base/essentials.jl      711 invokelatest
    72         0 ...ia/src/eventloop.jl     8 eventloop(::ZMQ.Socket)
    72         0 @Base/task.jl            358 (::IJulia.var"#15#18")()
    53         0 .../Random/src/RNGs.jl   468 fill_array!
    53         0 .../Random/src/RNGs.jl   494 rand!(::Random.MersenneTwister,...
    53         0 .../Random/src/RNGs.jl   506 _rand!
    53         0 .../Random/src/RNGs.jl   512 rand!
    53         0 ...andom/src/Random.jl   267 rand!
    53         0 ...andom/src/Random.jl   288 rand
    53         0 ...andom/src/Random.jl   289 rand(::Type{Float64}, ::Tuple{I...
    53         0 ...andom/src/Random.jl   277 rand
    53         0 In[295]                    2 myfunc()
     6         0 @Base/float.jl           536 isnan
     9         0 @Base/reduce.jl          577 mapreduce_impl(::typeof(identit...
    14         0 @Base/reduce.jl          407 _mapreduce(::typeof(identity), ...
    14         0 @Base/reducedim.jl       312 _mapreduce_dim
    14         0 @Base/reducedim.jl       307 #mapreduce#580
    14         0 @Base/reducedim.jl       307 mapreduce
    14         0 @Base/reducedim.jl       657 _maximum
    14         0 @Base/reducedim.jl       656 _maximum
    14         0 @Base/reducedim.jl       652 #maximum#587
    14         0 @Base/reducedim.jl       652 maximum
    14         0 In[295]                    3 myfunc()
     5         0 @Base/range.jl           597 iterate
     5         0 @Base/reduce.jl          580 mapreduce_impl(::typeof(identit...
     9         3 @Base/reduce.jl          545 _fast
    72         5 @Base/boot.jl            331 eval
     5         5 @Base/promotion.jl       398 ==
     6         6 @Base/float.jl           456 !=
    53        53 ...Random/src/DSFMT.jl    95 dsfmt_fill_array_close_open!(::...
   371       371 @Base/task.jl            702 poptaskref(::Base.InvasiveLinke...
Total snapshots: 888
#+end_example
